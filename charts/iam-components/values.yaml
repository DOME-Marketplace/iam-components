## configuration of postgres to be used for the keycloak - see https://github.com/bitnami/charts/tree/main/bitnami/postgresql for details
postgresql:
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  fullnameOverride: postgresql-iam
  ## auth configuration for the database
  auth:
    # -- username to be used
    username: keycloak
    # -- should the default postgres user be enabled
    enablePostgresUser: true
    # -- password to be used
    existingSecret: postgres-secret
    secretKeys:
      adminPasswordKey: postgres-root-password
      userPasswordKey: postgres-password
  ## creates role for ServiceAccount
  rbac:
    # -- should role be created
    create: false
  ## configuration of the postgres primary replica
  primary:
    ## provide db initialization
    initdb:
      ## provide scripts for initialization
      scripts:
        # -- create the database as expected by the keycloak
        create.sh: |
          psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE DATABASE keycloak_iam;"
          psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "ALTER DATABASE keycloak_iam OWNER TO keycloak;"

## configuration of mysql to be used for TIL, CCS and Keyrock - see https://github.com/bitnami/charts/tree/main/bitnami/mysql for details
mysql:
  nameOverride: mysql-iam
  fullnameOverride: mysql-iam
  auth:
    existingSecret: mysql-secret
    createDatabase: false
  serviceAccount:
    create: false
  initdbScripts:
    create.sql: |
      CREATE DATABASE til;
      CREATE DATABASE ccs;

## configuration of waltid to be used for keycloak and verifier - see https://github.com/dome-marketplace/iam-components/tree/main/charts/walt-id for details
vcwaltid:
  ## route configuration
  route:
    enabled: false
    certificate: {}

  fullnameOverride: waltid-iam
  ## deployment specific configuration
  deployment:
    ## deployment image
    image:
      # -- deployment image repository
      repository: waltid/ssikit
      # -- deployment image tag
      tag: 1.2311262046.fix-didwebpath
      # -- deployment image pull policy
      pullPolicy: Always
  api:
    core:
      enabled: true
    auditor:
      enabled: true
    signatory:
      enabled: true
    custodian:
      enabled: true
    essif:
      enabled: true

  persistence:
    enabled: true
    pvc:
      size: 1Gi
  ## credential templates
  templates:
    GaiaXParticipantCredential.json: |
      {
        "@context": [
          "https://www.w3.org/2018/credentials/v1",
          "https://registry.lab.gaia-x.eu/development/api/trusted-shape-registry/v1/shapes/jsonld/trustframework#"
        ],
        "type": [
          "VerifiableCredential"
        ],
        "id": "did:web:raw.githubusercontent.com:egavard:payload-sign:master",
        "issuer": "did:web:raw.githubusercontent.com:egavard:payload-sign:master",
        "issuanceDate": "2023-03-21T12:00:00.148Z",
        "credentialSubject": {
          "id": "did:web:raw.githubusercontent.com:egavard:payload-sign:master",
          "type": "gx:LegalParticipant",
          "gx:legalName": "dsba compliant participant",
          "gx:legalRegistrationNumber": {
            "gx:vatID": "MYVATID"
          },
          "gx:headquarterAddress": {
            "gx:countrySubdivisionCode": "BE-BRU"
          },
          "gx:legalAddress": {
            "gx:countrySubdivisionCode": "BE-BRU"
          },
          "gx-terms-and-conditions:gaiaxTermsAndConditions": "70c1d713215f95191a11d38fe2341faed27d19e083917bc8732ca4fea4976700"
        }
      }
    PacketDeliveryService.json: |
      {
        "@context": ["https://www.w3.org/2018/credentials/v1"],
        "credentialSchema": {
          "id": "https://raw.githubusercontent.com/FIWARE-Ops/tech-x-challenge/main/schema.json",
          "type": "FullJsonSchemaValidator2021"
        },
        "credentialSubject": {
          "type": "gx:NaturalParticipant",
          "familyName": "Happy",
          "firstName": "User",
          "lastName": "Happy",
          "roles": [{
            "names": ["LEGAL_REPRESENTATIVE"],
            "target": "did:web:onboarding"
          }]
        },
        "id": "urn:uuid:3add94f4-28ec-42a1-8704-4e4aa51006b4",
        "issued": "2021-08-30T00:00:00Z",
        "issuer": "did:ebsi:2A9BZ9SUe6BatacSpvs1V5CdjHvLpQ7bEsi2Jb6LdHKnQxaN",
        "validFrom": "2021-08-31T00:00:00Z",
        "issuanceDate": "2021-08-31T00:00:00Z",
        "type": ["PacketDeliveryService"]
      }
    NaturalPersonCredential.json: |
      {
        "@context": ["https://www.w3.org/2018/credentials/v1"],
        "credentialSchema": {
          "id": "https://raw.githubusercontent.com/FIWARE-Ops/tech-x-challenge/main/schema.json",
          "type": "FullJsonSchemaValidator2021"
        },
        "credentialSubject": {
          "type": "gx:NaturalParticipant",
          "familyName": "Happy",
          "firstName": "User",
          "roles": [{
            "names": ["LEGAL_REPRESENTATIVE"],
            "target": "did:web:onboarding"
          }]
        },
        "id": "urn:uuid:3add94f4-28ec-42a1-8704-4e4aa51006b4",
        "issued": "2021-08-31T00:00:00Z",
        "issuer": "did:ebsi:2A9BZ9SUe6BatacSpvs1V5CdjHvLpQ7bEsi2Jb6LdHKnQxaN",
        "validFrom": "2021-08-31T00:00:00Z",
        "issuanceDate": "2021-08-31T00:00:00Z",
        "type": ["VerifiableCredential", "LegalPersonCredential"]
      }

keycloak:
  fullnameOverride: keycloak-iam
  frontendUrl: http://localhost
  issuerDid: did:key:z6MkigCEnopwujz8Ten2dzq91nvMjqbKQYcifuZhqBsEkH7g

  realm:
    clients:
      - did: did:key:z6MksU6tMfbaDzvaRe5oFE4eZTVTV4HJM4fmQWWGsDGQVsEr
        description: Client to connect to some service
        roles:
          - name: LEGAL_REPRESENTATIVE
            description: Is allowed to register participants
          - name: STANDARD_CUSTOMER
            description: User to access PacketDelivery with read access
          - name: GOLD_CUSTOMER
            description: User to access PacketDelivery with read/write access
        verifiableCredentials:
          - name: PacketDeliveryService
            types:
              - ldp_vc
              - jwt_vc_json
            claims:
              - email
              - firstName
              - lastName
              - roles
    users:
      - username: prime-user
        password: prime-user
        clientRoles:
          - clientDid: did:key:z6MksU6tMfbaDzvaRe5oFE4eZTVTV4HJM4fmQWWGsDGQVsEr
            roles:
              - GOLD_CUSTOMER
  image:
    tag: 21.1.2-debian-11-r1
  service:
    type: ClusterIP
  logging:
    level: INFO
  replicaCount: 1
  auth:
    adminUser: fiwareAdmin
    adminPassword: fiwareAdmin
  serviceAccount:
    create: false
  rbac:
    create: false

  keycloakConfigCli:
    enabled: true
    # current image does not contain 20.0.3., thus we need this fix
    command:
      - java
      - -jar
      - /opt/bitnami/keycloak-config-cli/keycloak-config-cli-20.0.1.jar
    containerSecurityContext:
      enabled: false
    podSecurityContext:
      enabled: false
    existingConfigmap: keycloak-iam-realm

  extraEnvVars:
    - name: KEYCLOAK_PROXY_ADDRESS_FORWARDING
      value: "true"
    - name: KEYCLOAK_LOG_LEVEL
      value: INFO
    - name: VCISSUER_ISSUER_DID
      value: "did:key:z6MkigCEnopwujz8Ten2dzq91nvMjqbKQYcifuZhqBsEkH7g"
    - name: VCISSUER_WALTID_ADDRESS
      value: "http://waltid-iam"


  extraVolumeMounts:
    - name: profiles
      mountPath: /opt/bitnami/keycloak/conf/profile.properties
      subPath: profile.properties
    - name: providers
      mountPath: /opt/bitnami/keycloak/providers/
    - name: issuer-key
      mountPath: /opt/keys
    - name: data
      mountPath: /data


  extraVolumes:
    - name: data
      emptyDir: {}
    - name: profiles
      configMap:
        name: keycloak-iam-profile
    - name: providers
      emptyDir: {}
    - name: issuer-key
      configMap:
        name: keycloak-iam-key
    - name: did-config
      configMap:
        name: keycloak-iam-did-config

  initContainers:
    - name: add-vc-issuer
      image: quay.io/fiware/keycloak-vc-issuer:1.0.2
      imagePullPolicy: Always
      volumeMounts:
        - name: providers
          mountPath: /target
    - name: load-did
      image: quay.io/opencloudio/curl:4.2.0-build.8
      imagePullPolicy: Always
      command:
        - /bin/sh
        - /opt/did/script/import.sh
      env:
        - name: WALTID_CORE_ADDRESS
          value: "waltid-iam:7000"
      volumeMounts:
        - name: did-config
          mountPath: /opt/did/script
        - name: issuer-key
          mountPath: /opt/keys

  postgresql:
    enabled: false

  externalDatabase:
    host: postgresql-iam
    user: postgres
    database: keycloak_iam
    existingSecret: postgres-secret
    existingSecretPasswordKey: postgres-password

credentials-config-service:
  fullnameOverride: ccs-iam
  deployment:
    image:
      repository: quay.io/fiware/credentials-config-service
      tag: 1.0.1
  database:
    persistence: true
    host: mysql-iam
    username: root
    name: ccs
    existingSecret:
      enabled: true
      name: mysql-secret
      key: dbPassword

trusted-issuers-list:
  fullnameOverride: til-iam
  route:
    til:
      enabled: false
      certificate: {}
    tir:
      enabled: false
      certificate: {}
  ingress:
    til:
      enabled: false
    tir:
      enabled: false
  deployment:
    image:
      tag: 0.2.0
  database:
    persistence: true
    host: mysql-iam
    username: root
    name: til
    existingSecret:
      enabled: true
      name: mysql-secret
      key: dbPassword

vcverifier:
  fullnameOverride: verifier-iam
  deployment:
    # Image
    image:
      repository: quay.io/fiware/vcverifier
      tag: 2.8.0
      pullPolicy: Always
    # Logging
    logging:
      level: DEBUG
      pathsToSkip:
        - "/health"
    # Walt-id config
    ssikit:
      auditorUrl: http://waltid-iam:7003
    # Verifier config
    verifier:
      tirAddress: https://tir-iam/v4/issuers
      did: did:key:z6MksU6tMfbaDzvaRe5oFE4eZTVTV4HJM4fmQWWGsDGQVsEr
    # Config service
    configRepo:
      configEndpoint: http://ccs-iam:8080/
  route:
    enabled: false
    certificate: {}

keyrock:
  fullnameOverride: keyrock-iam
  statefulset:
    image:
      repository: quay.io/wi_stefan/keyrock
      tag: sn-fix-2
      pullPolicy: IfNotPresent
  db:
    user: root
    host: mysql-iam
    password: password
  existingSecret: keyrock-secret
  host: http://keyrock-iam
  route:
    enabled: false
  ## Configuration of Authorisation Registry (AR)
  authorisationRegistry:
    # -- Enable usage of authorisation registry
    enabled: true
    # -- Identifier (EORI) of AR
    identifier: "did:key:z6MkigCEnopwujz8Ten2dzq91nvMjqbKQYcifuZhqBsEkH7g"
    # -- URL of AR
    url: "internal"
  ## Configuration of iSHARE Satellite
  satellite:
    # -- Enable usage of satellite
    enabled: true
    # -- Identifier (EORI) of satellite
    identifier: "EU.EORI.FIWARESATELLITE"
    # -- URL of satellite
    url: "http://tir-iam"
    # -- Token endpoint of satellite
    tokenEndpoint: "http://tir-iam/token"
    # -- Parties endpoint of satellite
    partiesEndpoint: "http://tir-iam/parties"
  additionalEnvVars:
    - name: IDM_TITLE
      value: "DOME IAM AR"
    - name: IDM_DEBUG
      value: "true"
    - name: DEBUG
      value: "*"
    - name: IDM_DB_NAME
      value: bp_one_idm
    - name: IDM_DB_SEED
      value: "true"
    - name: IDM_SERVER_MAX_HEADER_SIZE
      value: "32768"
    - name: IDM_PR_CLIENT_ID
      value: "did:key:z6MksU6tMfbaDzvaRe5oFE4eZTVTV4HJM4fmQWWGsDGQVsEr"
    - name: IDM_PR_CLIENT_KEY
      valueFrom:
        secretKeyRef:
          name: keyrock-ar-sec
          key: key
    - name: IDM_PR_CLIENT_CRT
      valueFrom:
        secretKeyRef:
          name: keyrock-ar-sec
          key: cert
  initData:
    backoffLimit: 50
    initEnabled: true
    image: quay.io/wi_stefan/mysql:5.7
    command:
      - /bin/sh
      - /scripts/create.sh
    volumeMount:
      name: scripts
      mountPath: /scripts
    env:
      - name: DB_PASSWORD
        value: "password"
    scriptData:
      create.sh: |-
        mysql -h mysql-iam -u root -p$DB_PASSWORD bp_one_idm <<EOF

        -- Static objects
        SET @rules := JSON_ARRAY(
          JSON_OBJECT(
            "effect", "Permit"
          )
        );

        SET @subjectProvider := "PROVIDER";
        SET @subjectConsumer := "CONSUMER";
        SET @subjectLear := "LEGAL_REPRESENTATIVE";
        SET @subjectGold := "GOLD_CUSTOMER";
        SET @subjectStandard := "STANDARD_CUSTOMER";

        -- Policies Gold
        SET @policiesGold := JSON_ARRAY(
          JSON_OBJECT(
            "rules", CAST(@rules as JSON),
            "target", JSON_OBJECT(
              "actions", JSON_ARRAY("PATCH"),
              "resource", JSON_OBJECT(
                "type", "DELIVERYORDER",
                "attributes", JSON_ARRAY("pta","pda"),
                "identifiers", JSON_ARRAY("*")
              )
            )
          ),
          JSON_OBJECT(
            "rules", CAST(@rules as JSON),
            "target", JSON_OBJECT(
              "actions", JSON_ARRAY("GET"),
              "resource", JSON_OBJECT(
                "type", "DELIVERYORDER",
                "attributes", JSON_ARRAY("*"),
                "identifiers", JSON_ARRAY("*")
              )
            )
          )
        );

        -- Policies Lear 
        SET @policiesLear := JSON_ARRAY(
          JSON_OBJECT(
            "rules", CAST(@rules as JSON),
            "target", JSON_OBJECT(
              "actions", JSON_ARRAY("GET", "POST", "PUT"),
              "resource", JSON_OBJECT(
                "type", "PATH",
                "identifiers", JSON_ARRAY("/tmf-api/party/*")
              )
            )
          )
        );

        -- Policies Consumer
        SET @policiesConsumer := JSON_ARRAY(
          JSON_OBJECT(
            "rules", CAST(@rules as JSON),
            "target", JSON_OBJECT(
              "actions", JSON_ARRAY("GET"),
              "resource", JSON_OBJECT(
                "type", "PATH",
                "identifiers", JSON_ARRAY("/tmf-api/party/*")
              )
            )
          ),
          JSON_OBJECT(
            "rules", CAST(@rules as JSON),
            "target", JSON_OBJECT(
              "actions", JSON_ARRAY("GET"),
              "resource", JSON_OBJECT(
                "type", "PATH",
                "identifiers", JSON_ARRAY("/tmf-api/productCatalogManagement/*")
              )
            )
          ),
          JSON_OBJECT(
            "rules", CAST(@rules as JSON),
            "target", JSON_OBJECT(
              "actions", JSON_ARRAY("GET","POST","PUT"),
              "resource", JSON_OBJECT(
                "type", "PATH",
                "identifiers", JSON_ARRAY("/tmf-api/productOrderingManagement/*")
              )
            )
          )
        );

        -- Policies Provider
        SET @policiesProvider := JSON_ARRAY(
          JSON_OBJECT(
            "rules", CAST(@rules as JSON),
            "target", JSON_OBJECT(
              "actions", JSON_ARRAY("GET","POST"),
              "resource", JSON_OBJECT(
                "type", "PATH",
                "identifiers", JSON_ARRAY("/tmf-api/party/*")
              )
            )
          ),
          JSON_OBJECT(
            "rules", CAST(@rules as JSON),
            "target", JSON_OBJECT(
              "actions", JSON_ARRAY("GET","POST","PUT","DELETE"),
              "resource", JSON_OBJECT(
                "type", "PATH",
                "identifiers", JSON_ARRAY("/tmf-api/customerBillManagement/*")
              )
            )
          ),
          JSON_OBJECT(
            "rules", CAST(@rules as JSON),
            "target", JSON_OBJECT(
              "actions", JSON_ARRAY("GET","POST","PUT","DELETE"),
              "resource", JSON_OBJECT(
                "type", "PATH",
                "identifiers", JSON_ARRAY("/tmf-api/customerManagement/*")
              )
            )
          ),
          JSON_OBJECT(
            "rules", CAST(@rules as JSON),
            "target", JSON_OBJECT(
              "actions", JSON_ARRAY("GET","POST","PUT","DELETE"),
              "resource", JSON_OBJECT(
                "type", "PATH",
                "identifiers", JSON_ARRAY("/tmf-api/productCatalogManagement/*")
              )
            )
          ),
          JSON_OBJECT(
            "rules", CAST(@rules as JSON),
            "target", JSON_OBJECT(
              "actions", JSON_ARRAY("GET","POST","PUT","DELETE"),
              "resource", JSON_OBJECT(
                "type", "PATH",
                "identifiers", JSON_ARRAY("/tmf-api/productInventory/*")
              )
            )
          ),
          JSON_OBJECT(
            "rules", CAST(@rules as JSON),
            "target", JSON_OBJECT(
              "actions", JSON_ARRAY("GET","POST","PUT","DELETE"),
              "resource", JSON_OBJECT(
                "type", "PATH",
                "identifiers", JSON_ARRAY("/tmf-api/productOrderingManagement/*")
              )
            )
          ),
          JSON_OBJECT(
            "rules", CAST(@rules as JSON),
            "target", JSON_OBJECT(
              "actions", JSON_ARRAY("GET","POST","PUT","DELETE"),
              "resource", JSON_OBJECT(
                "type", "PATH",
                "identifiers", JSON_ARRAY("/tmf-api/resourceCatalog/*")
              )
            )
          ),
          JSON_OBJECT(
            "rules", CAST(@rules as JSON),
            "target", JSON_OBJECT(
              "actions", JSON_ARRAY("GET","POST","PUT","DELETE"),
              "resource", JSON_OBJECT(
                "type", "PATH",
                "identifiers", JSON_ARRAY("/tmf-api/resourceFunctionActivation/*")
              )
            )
          ),
          JSON_OBJECT(
            "rules", CAST(@rules as JSON),
            "target", JSON_OBJECT(
              "actions", JSON_ARRAY("GET","POST","PUT","DELETE"),
              "resource", JSON_OBJECT(
                "type", "PATH",
                "identifiers", JSON_ARRAY("/tmf-api/resourceInventoryManagement/*")
              )
            )
          ),
          JSON_OBJECT(
            "rules", CAST(@rules as JSON),
            "target", JSON_OBJECT(
              "actions", JSON_ARRAY("GET","POST","PUT","DELETE"),
              "resource", JSON_OBJECT(
                "type", "PATH",
                "identifiers", JSON_ARRAY("/tmf-api/serviceCatalogManagement/*")
              )
            )
          )
        );


        -- Policies Standard
        SET @policiesStandard := JSON_ARRAY(
          JSON_OBJECT(
            "rules", CAST(@rules as JSON),
            "target", JSON_OBJECT(
              "actions", JSON_ARRAY("GET"),
              "resource", JSON_OBJECT(
                "type", "DELIVERYORDER",
                "attributes", JSON_ARRAY("*"),
                "identifiers", JSON_ARRAY("*")
              )
            )
          )
        );

        -- Insert Delegation Evidence Gold VC
        SET @delegationGoldVC := JSON_OBJECT(
          "target", JSON_OBJECT(
            "accessSubject", @subjectGold
          ),
          "notBefore", 1616583866,
          "notOnOrAfter", 1735817171,
          "policyIssuer", "did:key:z6MkigCEnopwujz8Ten2dzq91nvMjqbKQYcifuZhqBsEkH7g",
          "policySets", JSON_ARRAY(
            JSON_OBJECT(
              "target", JSON_OBJECT(
                "environment", JSON_OBJECT(
                  "licenses", JSON_ARRAY("ISHARE.0001")
                )
              ),
              "policies", CAST(@policiesGold as JSON)
            )
          )
        );
        INSERT IGNORE INTO delegation_evidence (policy_issuer, access_subject,policy) VALUES ("did:key:z6MkigCEnopwujz8Ten2dzq91nvMjqbKQYcifuZhqBsEkH7g", @subjectGold, @delegationGoldVC);

        -- Insert Delegation Evidence Provider VC
        SET @delegationProviderVC := JSON_OBJECT(
          "target", JSON_OBJECT(
            "accessSubject", @subjectProvider
          ),
          "notBefore", 1616583866,
          "notOnOrAfter", 1735817171,
          "policyIssuer", "did:key:z6MkigCEnopwujz8Ten2dzq91nvMjqbKQYcifuZhqBsEkH7g",
          "policySets", JSON_ARRAY(
            JSON_OBJECT(
              "target", JSON_OBJECT(
                "environment", JSON_OBJECT(
                  "licenses", JSON_ARRAY("ISHARE.0001")
                )
              ),
              "policies", CAST(@policiesProvider as JSON)
            )
          )
        );
        INSERT IGNORE INTO delegation_evidence (policy_issuer, access_subject,policy) VALUES ("did:key:z6MkigCEnopwujz8Ten2dzq91nvMjqbKQYcifuZhqBsEkH7g", @subjectProvider, @delegationProviderVC);

        -- Insert Delegation Evidence Lear VC
        SET @delegationLearVC := JSON_OBJECT(
          "target", JSON_OBJECT(
            "accessSubject", @subjectlear
          ),
          "notBefore", 1616583866,
          "notOnOrAfter", 1735817171,
          "policyIssuer", "did:key:z6MkigCEnopwujz8Ten2dzq91nvMjqbKQYcifuZhqBsEkH7g",
          "policySets", JSON_ARRAY(
            JSON_OBJECT(
              "target", JSON_OBJECT(
                "environment", JSON_OBJECT(
                  "licenses", JSON_ARRAY("ISHARE.0001")
                )
              ),
              "policies", CAST(@policiesLear as JSON)
            )
          )
        );
        INSERT IGNORE INTO delegation_evidence (policy_issuer, access_subject,policy) VALUES ("did:key:z6MkigCEnopwujz8Ten2dzq91nvMjqbKQYcifuZhqBsEkH7g", @subjectLear, @delegationLearVC);



        -- Insert Delegation Evidence Consumer VC
        SET @delegationConsumerVC := JSON_OBJECT(
          "target", JSON_OBJECT(
            "accessSubject", @subjectConsumer
          ),
          "notBefore", 1616583866,
          "notOnOrAfter", 1735817171,
          "policyIssuer", "did:key:z6MkigCEnopwujz8Ten2dzq91nvMjqbKQYcifuZhqBsEkH7g",
          "policySets", JSON_ARRAY(
            JSON_OBJECT(
              "target", JSON_OBJECT(
                "environment", JSON_OBJECT(
                  "licenses", JSON_ARRAY("ISHARE.0001")
                )
              ),
              "policies", CAST(@policiesConsumer as JSON)
            )
          )
        );
        INSERT IGNORE INTO delegation_evidence (policy_issuer, access_subject,policy) VALUES ("did:key:z6MkigCEnopwujz8Ten2dzq91nvMjqbKQYcifuZhqBsEkH7g", @subjectConsumer, @delegationConsumerVC);

        -- Insert Delegation Evidence Standard VC
        SET @delegationStandardVC := JSON_OBJECT(
          "target", JSON_OBJECT(
            "accessSubject", @subjectStandard
          ),
          "notBefore", 1616583866,
          "notOnOrAfter", 1735817171,
          "policyIssuer", "did:key:z6MkigCEnopwujz8Ten2dzq91nvMjqbKQYcifuZhqBsEkH7g",
          "policySets", JSON_ARRAY(
            JSON_OBJECT(
              "target", JSON_OBJECT(
                "environment", JSON_OBJECT(
                  "licenses", JSON_ARRAY("ISHARE.0001")
                )
              ),
              "policies", CAST(@policiesStandard as JSON)
            )
          )
        );
        INSERT IGNORE INTO delegation_evidence (policy_issuer, access_subject,policy) VALUES ("did:key:z6MkigCEnopwujz8Ten2dzq91nvMjqbKQYcifuZhqBsEkH7g", @subjectStandard, @delegationStandardVC);

        COMMIT;
        EOF

dsba-pdp:
  fullnameOverride: pdp-iam
  # DB
  db:
    enabled: false
    migrate:
      enabled: false
  deployment:
    # Image
    image:
      pullPolicy: Always
      repository: quay.io/fiware/dsba-pdp
      # includes the http policy support
      tag: 1.2.0
    # Log level
    logLevel: TRACE
    # iSHARE config
    ishare:
      existingSecret: keyrock-ar-sec
      clientId: EU.EORI.PACKETDELIVERY
      trustedFingerprints:
        - MYFINGERPRINT
      ar:
        id: "did:key:z6MksU6tMfbaDzvaRe5oFE4eZTVTV4HJM4fmQWWGsDGQVsEr"
        delegationPath: "/ar/delegation"
        tokenPath: "/oauth2/token"
        url: "http://keyrock-iam"
      trustAnchor:
        id: "EU.EORI.FIWARESATELLITE"
        tokenPath: "/token"
        trustedListPath: "/trusted_list"
        url: "http://tir-iam"
    # Verifier
    trustedVerifiers:
      - http://verifier-iam/.well-known/jwks
    # Provider DID
    providerId: "did:key:z6MksU6tMfbaDzvaRe5oFE4eZTVTV4HJM4fmQWWGsDGQVsEr"
  # ENVs
  additionalEnvVars:
    - name: ISHARE_CERTIFICATE_PATH
      value: /iShare/cert
    - name: ISHARE_KEY_PATH
      value: /iShare/key

kong:
  nameOverride: kong-iam
  fullnameOverride: kong-iam
  image:
    repository: quay.io/fiware/kong
    tag: "0.5.6"
    pullPolicy: IfNotPresent
  deployment:
    serviceAccount:
      create: false
  replicaCount: 1
  env:
    database: "off"
    nginx_worker_processes: "2"
    proxy_access_log: /dev/stdout
    admin_access_log: /dev/stdout
    admin_gui_access_log: /dev/stdout
    portal_api_access_log: /dev/stdout
    proxy_error_log: /dev/stderr
    admin_error_log: /dev/stderr
    admin_gui_error_log: /dev/stderr
    portal_api_error_log: /dev/stderr
    prefix: /kong_prefix/
    log_level: debug
    nginx_proxy_large_client_header_buffers: "16 128k"
    nginx_proxy_http2_max_field_size: "32k"
    nginx_proxy_http2_max_header_size: "32k"
    plugins: bundled,pep-plugin,ngsi-ishare-policies
    pluginserver_names: pep-plugin
    pluginserver_pep_plugin_start_cmd: "/go-plugins/pep-plugin"
    pluginserver_pep_plugin_query_cmd: "/go-plugins/pep-plugin -dump"
  ingressController:
    enabled: false
    installCRDs: false
    rbac:
      create: false
  proxy:
    tls:
      enabled: false
  admin:
    enabled: true
    type: ClusterIP
    http:
      enabled: true
      servicePort: 8001
      containerPort: 8001
  status:
    enabled: true
    http:
      enabled: true
      containerPort: 9102
  dblessConfig:
    configMap: kong-iam-configmap